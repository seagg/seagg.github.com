<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[心静茹水]]></title>
  <link href="http://seagg.github.com/atom.xml" rel="self"/>
  <link href="http://seagg.github.com/"/>
  <updated>2013-03-28T17:34:22+08:00</updated>
  <id>http://seagg.github.com/</id>
  <author>
    <name><![CDATA[Zhao, Xuhai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyWarrior 一个人工智能小游戏]]></title>
    <link href="http://seagg.github.com/blog/2013/02/27/rubywarrior/"/>
    <updated>2013-02-27T18:24:00+08:00</updated>
    <id>http://seagg.github.com/blog/2013/02/27/rubywarrior</id>
    <content type="html"><![CDATA[<p>项目主页：<a href="http://github.com/ryanb/ruby-warrior/tree/master">http://github.com/ryanb/ruby-warrior/tree/master</a>  <br/>
这个游戏以一种有趣交互的方式来教你使用Ruby语言和人工智能。   <br/>
在游戏中你扮演一个勇士去攀登高塔得到顶层的珍贵的红宝石。   <br/>
在塔中每一层也就是每一关，你需要编写一个Ruby脚本来指导主角如何到达楼梯处然后进入下一关。   <br/>
在每一关你必须给足主角战斗的力量，你得考虑主角还有多少生命值，什么时候得休息恢复一下生命值等等。注意：每一个回合里，主角只能有一步操作，比如前进一次、休息加血、进攻、解救人质等。   <br/>
具体的安装，运行和规则请参考github上的项目主页。这里直接贴出beginner级别的第七关代码（前几关忘记保存了&#8230;）。  <br/>
这个游戏中每一关中的每一步都得小心翼翼，很有可能战斗过程中被干掉，所以每一步都得考虑好。比如这一关，地图是这样的：</p>

<pre><code> ------
|&gt;a S @|
 ------
</code></pre>

<p>图中的<code>@</code>表示自己，<code>S</code>表示怪兽，<code>a</code>表示弓箭手，而目标就是干掉这两个敌人然后活着走到<code>&gt;</code>处。  <br/>
每一关，人物默认都是向右走的，这里走一步发现撞墙了，所以要转向。走两步发现遇到怪兽了，要用<code>warrior.attack!</code>进行攻击。  <br/>
为了防止失血过多，当发现这一轮没有受到攻击且剩余血&lt;20的时候，可以通过休息来补充血液。  <br/>
弓箭手与怪兽的一个不同就是弓箭手可以远程攻击，有可能你向前走一步，进入弓箭手的射程，但你还没走到他面前，这一过程一直要减血。所以为了防止到弓箭手面前的时候剩余血液不足以干掉他的情况发生，需要有个判断，就是当这一轮受到攻击，且血液不足以走到弓箭手面前将他干掉，需要后退几步，退出他的射程，然后休息补血，血液充足了再向前走。</p>

<figure class='code'><figcaption><span>第七关的说明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Level</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">You</span> <span class="n">feel</span> <span class="n">a</span> <span class="n">wall</span> <span class="n">right</span> <span class="n">in</span> <span class="n">front</span> <span class="n">of</span> <span class="n">you</span> <span class="n">and</span> <span class="n">an</span> <span class="n">opening</span> <span class="n">behind</span> <span class="n">you</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Tip:</span> <span class="n">You</span> <span class="n">are</span> <span class="n">not</span> <span class="n">as</span> <span class="n">effective</span> <span class="n">at</span> <span class="n">attacking</span> <span class="n">backward</span><span class="p">.</span> <span class="n">Use</span> <span class="n">warrior</span><span class="p">.</span><span class="n">feel</span><span class="p">.</span><span class="n">wall</span><span class="o">?</span> <span class="n">and</span> <span class="n">warrior</span><span class="p">.</span><span class="n">pivot</span><span class="o">!</span> <span class="n">to</span> <span class="n">turn</span> <span class="n">around</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span> <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&gt;</span> <span class="o">=</span> <span class="n">Stairs</span>
</span><span class='line'>  <span class="err">@</span> <span class="o">=</span> <span class="n">xuhai</span> <span class="p">(</span><span class="mi">20</span> <span class="n">HP</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">Archer</span> <span class="p">(</span><span class="mi">7</span> <span class="n">HP</span><span class="p">)</span>
</span><span class='line'>  <span class="n">S</span> <span class="o">=</span> <span class="n">Thick</span> <span class="n">Sludge</span> <span class="p">(</span><span class="mi">24</span> <span class="n">HP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Warrior</span> <span class="n">Abilities</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">pivot</span><span class="o">!</span>
</span><span class='line'>    <span class="n">Rotate</span> <span class="o">:</span><span class="n">left</span><span class="p">,</span> <span class="o">:</span><span class="n">right</span> <span class="n">or</span> <span class="o">:</span><span class="n">backward</span> <span class="p">(</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">rescue</span><span class="o">!</span>
</span><span class='line'>    <span class="n">Rescue</span> <span class="n">a</span> <span class="n">captive</span> <span class="n">from</span> <span class="n">his</span> <span class="n">chains</span> <span class="p">(</span><span class="n">earning</span> <span class="mi">20</span> <span class="n">points</span><span class="p">)</span> <span class="n">in</span> <span class="n">given</span> <span class="n">direction</span> <span class="p">(</span><span class="n">forward</span> <span class="n">by</span> <span class="k">default</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">health</span>
</span><span class='line'>    <span class="n">Returns</span> <span class="n">an</span> <span class="n">integer</span> <span class="n">representing</span> <span class="n">your</span> <span class="n">health</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">rest</span><span class="o">!</span>
</span><span class='line'>    <span class="n">Gain</span> <span class="mi">10</span><span class="o">%</span> <span class="n">of</span> <span class="n">max</span> <span class="n">health</span> <span class="n">back</span><span class="p">,</span> <span class="n">but</span> <span class="k">do</span> <span class="n">nothing</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">feel</span>
</span><span class='line'>    <span class="n">Returns</span> <span class="n">a</span> <span class="n">Space</span> <span class="k">for</span> <span class="n">the</span> <span class="n">given</span> <span class="n">direction</span> <span class="p">(</span><span class="n">forward</span> <span class="n">by</span> <span class="k">default</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">attack</span><span class="o">!</span>
</span><span class='line'>    <span class="n">Attacks</span> <span class="n">a</span> <span class="n">unit</span> <span class="n">in</span> <span class="n">given</span> <span class="n">direction</span> <span class="p">(</span><span class="n">forward</span> <span class="n">by</span> <span class="k">default</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">warrior</span><span class="p">.</span><span class="n">walk</span><span class="o">!</span>
</span><span class='line'>    <span class="n">Move</span> <span class="n">in</span> <span class="n">the</span> <span class="n">given</span> <span class="n">direction</span> <span class="p">(</span><span class="n">forward</span> <span class="n">by</span> <span class="k">default</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">When</span> <span class="n">you</span><span class="err">&#39;</span><span class="n">re</span> <span class="n">done</span> <span class="n">editing</span> <span class="n">player</span><span class="p">.</span><span class="n">rb</span><span class="p">,</span> <span class="n">run</span> <span class="n">the</span> <span class="n">rubywarrior</span> <span class="n">command</span> <span class="n">again</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Code for beginner-level 7</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">wall?</span>
</span><span class='line'>        <span class="n">warrior</span><span class="o">.</span><span class="n">pivot!</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>       <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">enemy?</span>
</span><span class='line'>           <span class="n">warrior</span><span class="o">.</span><span class="n">attack!</span>
</span><span class='line'>       <span class="k">else</span>
</span><span class='line'>           <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">==</span> <span class="vi">@health</span> <span class="o">||</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">==</span> <span class="vi">@health</span> <span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>               <span class="n">warrior</span><span class="o">.</span><span class="n">rest!</span>
</span><span class='line'>           <span class="k">else</span>
</span><span class='line'>               <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span><span class="mi">15</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span> <span class="vi">@health</span> <span class="p">)</span>
</span><span class='line'>                   <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span><span class="p">(</span><span class="ss">:backward</span><span class="p">)</span>
</span><span class='line'>               <span class="k">else</span>
</span><span class='line'>                   <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>               <span class="k">end</span>
</span><span class='line'>           <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@health</span> <span class="o">=</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>每轮战况!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">1</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span> <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">pivots</span> <span class="n">backward</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">2</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span> <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">3</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span><span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Thick</span> <span class="n">Sludge</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">19</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">17</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">4</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span><span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Thick</span> <span class="n">Sludge</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">14</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">14</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">5</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span><span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Thick</span> <span class="n">Sludge</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">9</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">11</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">6</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span><span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Thick</span> <span class="n">Sludge</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">4</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">8</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">7</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="n">S</span><span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Thick</span> <span class="n">Sludge</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Thick</span> <span class="n">Sludge</span> <span class="n">dies</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">earns</span> <span class="mi">24</span> <span class="n">points</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">8</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>  <span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">health</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">shoots</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">7</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">9</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>  <span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">backward</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">shoots</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">nothing</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">10</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">9</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">11</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">11</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">12</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">13</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">13</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">15</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">14</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">17</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">15</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">19</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">16</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">1</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">20</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">17</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>   <span class="err">@</span><span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">18</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span>  <span class="err">@</span> <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">shoots</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">17</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">19</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span> <span class="err">@</span>  <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">shoots</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">14</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">20</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span><span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Archer</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">shoots</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">xuhai</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">takes</span> <span class="mi">3</span> <span class="n">damage</span><span class="p">,</span> <span class="mi">11</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">21</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="n">a</span><span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">attacks</span> <span class="n">forward</span> <span class="n">and</span> <span class="n">hits</span> <span class="n">Archer</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">takes</span> <span class="mi">5</span> <span class="n">damage</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span> <span class="n">health</span> <span class="n">power</span> <span class="n">left</span>
</span><span class='line'><span class="n">Archer</span> <span class="n">dies</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">earns</span> <span class="mi">7</span> <span class="n">points</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">22</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">13</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">23</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">15</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">24</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">17</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">25</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">2</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">19</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">26</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">receives</span> <span class="mi">1</span> <span class="n">health</span> <span class="n">from</span> <span class="n">resting</span><span class="p">,</span> <span class="n">up</span> <span class="n">to</span> <span class="mi">20</span> <span class="n">health</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">27</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="err">@</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="o">-</span> <span class="n">turn</span> <span class="mi">28</span> <span class="o">-</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="o">|&gt;</span><span class="err">@</span>    <span class="o">|</span>
</span><span class='line'> <span class="o">------</span>
</span><span class='line'><span class="n">xuhai</span> <span class="n">walks</span> <span class="n">forward</span>
</span><span class='line'><span class="n">Success</span><span class="o">!</span> <span class="n">You</span> <span class="n">have</span> <span class="n">found</span> <span class="n">the</span> <span class="n">stairs</span><span class="p">.</span>
</span><span class='line'><span class="n">Level</span> <span class="n">Score</span><span class="o">:</span> <span class="mi">31</span>
</span><span class='line'><span class="n">Time</span> <span class="n">Bonus</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Clear</span> <span class="n">Bonus</span><span class="o">:</span> <span class="mi">7</span>
</span><span class='line'><span class="n">Total</span> <span class="n">Score</span><span class="o">:</span> <span class="mi">364</span> <span class="o">+</span> <span class="mi">40</span> <span class="o">=</span> <span class="mi">404</span>
</span></code></pre></td></tr></table></div></figure>


<p>很不错的游戏，可惜没有Java或者C版的，有空考虑写一个。当然，要是能写成对战类的更好了。  <br/>
今天在github上溜达的时候发现有个哥们的<a href="https://github.com/peterwongpp/PeterWarrior">第六关代码</a>，比较牛，不想我傻呵呵的一直用if分支。有空学习学习！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]用 GDB 调试程序]]></title>
    <link href="http://seagg.github.com/blog/2013/02/25/gcc/"/>
    <updated>2013-02-25T11:42:00+08:00</updated>
    <id>http://seagg.github.com/blog/2013/02/25/gcc</id>
    <content type="html"><![CDATA[<p>转载自[<a href="http://blog.csdn.net/niuniuchou/article/details/5385890">http://blog.csdn.net/niuniuchou/article/details/5385890</a>]  <br/>
GDB 概述</p>

<p>GDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像 VC 、 BCB 等 IDE 的调试，但如果你是在 UNIX 平台下做软件，你会发现 GDB 这个调试工具有比 VC 、 BCB 的图形化调试器更强大的功能。所谓 “ 寸有所长，尺有所短 ” 就是这个道理。</p>

<p>一般来说， GDB 主要帮忙你完成下面四个方面的功能：</p>

<pre><code>1 、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。
2 、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）
3 、当程序被停住时，可以检查此时你的程序中所发生的事。
4 、动态的改变你程序的执行环境。
</code></pre>

<p>从上面看来， GDB 和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现 GDB 这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。让我们一一看来。</p>

<p>一个调试示例  <br/>
源程序：</p>

<figure class='code'><figcaption><span>tst.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result[1-100] = %ld </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result[1-250] = %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="mi">250</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译生成执行文件：（ Linux 下）</p>

<pre><code>hchen/test&gt; g++ -g -Wall tst.c -o tst
</code></pre>

<p>使用 GDB 调试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">hchen</span><span class="o">/</span><span class="n">test</span><span class="o">&gt;</span> <span class="n">gdb</span> <span class="p">.</span><span class="o">/</span><span class="n">tst</span> <span class="o">&lt;----------</span> <span class="err">启动</span> <span class="n">GDB</span>
</span><span class='line'><span class="n">GNU</span> <span class="n">gdb</span> <span class="mf">5.1.1</span>
</span><span class='line'><span class="n">Copyright</span> <span class="mi">2002</span> <span class="n">Free</span> <span class="n">Software</span> <span class="n">Foundation</span><span class="p">,</span> <span class="n">Inc</span><span class="p">.</span>
</span><span class='line'><span class="n">GDB</span> <span class="n">is</span> <span class="n">free</span> <span class="n">software</span><span class="p">,</span> <span class="n">covered</span> <span class="n">by</span> <span class="n">the</span> <span class="n">GNU</span> <span class="n">General</span> <span class="n">Public</span> <span class="n">License</span><span class="p">,</span> <span class="n">and</span> <span class="n">you</span> <span class="n">are</span>
</span><span class='line'><span class="n">welcome</span> <span class="n">to</span> <span class="n">change</span> <span class="n">it</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="n">distribute</span> <span class="n">copies</span> <span class="n">of</span> <span class="n">it</span> <span class="n">under</span> <span class="n">certain</span> <span class="n">conditions</span><span class="p">.</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;show copying&quot;</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">conditions</span><span class="p">.</span>
</span><span class='line'><span class="n">There</span> <span class="n">is</span> <span class="n">absolutely</span> <span class="n">no</span> <span class="n">warranty</span> <span class="k">for</span> <span class="n">GDB</span><span class="p">.</span> <span class="n">Type</span> <span class="s">&quot;show warranty&quot;</span> <span class="k">for</span> <span class="n">details</span><span class="p">.</span>
</span><span class='line'><span class="n">This</span> <span class="n">GDB</span> <span class="n">was</span> <span class="n">configured</span> <span class="n">as</span> <span class="s">&quot;i386-suse-linux&quot;</span><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">l</span>     <span class="o">&lt;--------------------</span> <span class="n">l</span> <span class="err">命令相当于</span> <span class="n">list</span> <span class="err">，从第一行开始例出原码。</span>
</span><span class='line'><span class="mi">1</span>        <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>        <span class="kt">int</span> <span class="n">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span>        <span class="p">{</span>
</span><span class='line'><span class="mi">5</span>                <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="mi">6</span>                <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="mi">7</span>                <span class="p">{</span>
</span><span class='line'><span class="mi">8</span>                        <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="mi">9</span>                <span class="p">}</span>
</span><span class='line'><span class="mi">10</span>               <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span>       <span class="o">&lt;--------------------</span> <span class="err">直接回车表示，重复上一次命令</span>
</span><span class='line'><span class="mi">11</span>       <span class="p">}</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">13</span>
</span><span class='line'><span class="mi">14</span>       <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="mi">15</span>       <span class="p">{</span>
</span><span class='line'><span class="mi">16</span>               <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="mi">17</span>               <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">18</span>               <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="mi">19</span>               <span class="p">{</span>
</span><span class='line'><span class="mi">20</span>                       <span class="n">result</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="k">break</span> <span class="mi">16</span>    <span class="o">&lt;--------------------</span> <span class="err">设置断点，在源程序第</span> <span class="mi">16</span> <span class="err">行处。</span>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span> <span class="n">at</span> <span class="mh">0x8048496</span><span class="o">:</span> <span class="n">file</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="n">line</span> <span class="mf">16.</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="k">break</span> <span class="n">func</span> <span class="o">&lt;--------------------</span> <span class="err">设置断点，在函数</span> <span class="n">func</span><span class="p">()</span> <span class="err">入口处。</span>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">2</span> <span class="n">at</span> <span class="mh">0x8048456</span><span class="o">:</span> <span class="n">file</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="n">line</span> <span class="mf">5.</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">info</span> <span class="k">break</span> <span class="o">&lt;--------------------</span> <span class="err">查看断点信息。</span>
</span><span class='line'><span class="n">Num</span> <span class="n">Type</span>           <span class="n">Disp</span> <span class="n">Enb</span> <span class="n">Address</span>    <span class="n">What</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">breakpoint</span>     <span class="n">keep</span> <span class="n">y</span>   <span class="mh">0x08048496</span> <span class="n">in</span> <span class="n">main</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">16</span>
</span><span class='line'><span class="mi">2</span>   <span class="n">breakpoint</span>     <span class="n">keep</span> <span class="n">y</span>   <span class="mh">0x08048456</span> <span class="n">in</span> <span class="n">func</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span>           <span class="o">&lt;---------------------</span> <span class="err">运行程序，</span> <span class="n">run</span> <span class="err">命令简写</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">program</span><span class="o">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">hchen</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">tst</span>
</span><span class='line'>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="n">main</span> <span class="p">()</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">17</span>    <span class="o">&lt;----------</span> <span class="err">在断点处停住。</span>
</span><span class='line'><span class="mi">17</span>               <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>          <span class="o">&lt;---------------------</span> <span class="err">单条语句执行，</span> <span class="n">next</span> <span class="err">命令简写。</span>
</span><span class='line'><span class="mi">18</span>               <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">20</span>                       <span class="n">result</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">18</span>               <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">20</span>                       <span class="n">result</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">c</span>          <span class="o">&lt;---------------------</span> <span class="err">继续运行程序，</span> <span class="k">continue</span> <span class="err">命令简写。</span>
</span><span class='line'><span class="n">Continuing</span><span class="p">.</span>
</span><span class='line'><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5050</span>       <span class="o">&lt;----------</span> <span class="err">程序输出。</span>
</span><span class='line'>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">2</span><span class="p">,</span> <span class="n">func</span> <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">250</span><span class="p">)</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'><span class="mi">5</span>                <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">6</span>                <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">p</span> <span class="n">i</span>        <span class="o">&lt;---------------------</span> <span class="err">打印变量</span> <span class="n">i</span> <span class="err">的值，</span> <span class="n">print</span> <span class="err">命令简写。</span>
</span><span class='line'><span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="mi">134513808</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">8</span>                        <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">6</span>                <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">p</span> <span class="n">sum</span>
</span><span class='line'><span class="err">$</span><span class="mi">2</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">8</span>                        <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">p</span> <span class="n">i</span>
</span><span class='line'><span class="err">$</span><span class="mi">3</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'><span class="mi">6</span>                <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">p</span> <span class="n">sum</span>
</span><span class='line'><span class="err">$</span><span class="mi">4</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">bt</span>        <span class="o">&lt;---------------------</span> <span class="err">查看函数堆栈。</span>
</span><span class='line'><span class="cp">#0 func (n=250) at tst.c:5</span>
</span><span class='line'><span class="cp">#1 0x080484e4 in main () at tst.c:24</span>
</span><span class='line'><span class="cp">#2 0x400409ed in __libc_start_main () from /lib/libc.so.6</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">finish</span>    <span class="o">&lt;---------------------</span> <span class="err">退出函数。</span>
</span><span class='line'><span class="n">Run</span> <span class="n">till</span> <span class="n">exit</span> <span class="n">from</span> <span class="err">#</span><span class="mi">0</span> <span class="n">func</span> <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">250</span><span class="p">)</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'><span class="mh">0x080484e4</span> <span class="n">in</span> <span class="n">main</span> <span class="p">()</span> <span class="n">at</span> <span class="n">tst</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">24</span>
</span><span class='line'><span class="mi">24</span>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result[1-250] = %d /n&quot;</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="mi">250</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">Value</span> <span class="n">returned</span> <span class="n">is</span> <span class="err">$</span><span class="mi">6</span> <span class="o">=</span> <span class="mi">31375</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">c</span>     <span class="o">&lt;---------------------</span> <span class="err">继续运行。</span>
</span><span class='line'><span class="n">Continuing</span><span class="p">.</span>
</span><span class='line'><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="mi">250</span><span class="p">]</span> <span class="o">=</span> <span class="mi">31375</span>    <span class="o">&lt;----------</span> <span class="err">程序输出。</span>
</span><span class='line'>
</span><span class='line'><span class="n">Program</span> <span class="n">exited</span> <span class="n">with</span> <span class="n">code</span> <span class="mf">027.</span> <span class="o">&lt;--------</span> <span class="err">程序退出，调试结束。</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">q</span>     <span class="o">&lt;---------------------</span> <span class="err">退出</span> <span class="n">gdb</span> <span class="err">。</span>
</span><span class='line'><span class="n">hchen</span><span class="o">/</span><span class="n">test</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx+fastcgi下开发php扩展]]></title>
    <link href="http://seagg.github.com/blog/2013/01/22/php-extension/"/>
    <updated>2013-01-22T15:26:00+08:00</updated>
    <id>http://seagg.github.com/blog/2013/01/22/php-extension</id>
    <content type="html"><![CDATA[<p>本文参考：<a href="http://www.laruence.com/2009/04/28/719.html">用C/C++扩展你的PHP</a>  <br/>
要开发扩展，首先需要有php的源码包，可以到php官网下载，我使用的版本是5.3.10，之后解压，进入ext目录里。  <br/>
先建立一个函数定义到.def文件当中，比如<code>string self_concat(string str, int n)</code>，这样的话，会在稍后生成的扩展框架中自动添加函数原型和一个默认实现。当然，也可以不使用这个文件，手动去建立函数。</p>

<pre><code>vi myfunctions.def
</code></pre>

<p>之后是用php的ext_skel生成php扩展的框架：</p>

<pre><code>./ext_skel --extname=myfunctions --proto=../myfunctions.def
</code></pre>

<p>会在ext目录下生成一个名为<code>myfunctions</code>的目录，里面包含了php扩展框架基本文件。  <br/>
之后，是修改<code>php_myfunctions.h</code>文件，在<code>PHP_FUNCTION(confirm_myfunctions_compiled);</code>之后添加函数定义</p>

<pre><code>PHP_FUNCTION(self_concat);
</code></pre>

<p>再修改<code>myfunctions.c</code>文件，在文件末尾添加函数实现
比如</p>

<figure class='code'><figcaption><span>self_concat实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PHP_FUNCTION</span><span class="p">(</span><span class="n">self_concat</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">argc</span> <span class="o">=</span> <span class="n">ZEND_NUM_ARGS</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">str_len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span> <span class="cm">/* Points to resulting string */</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="cm">/* Points at the next location we want to copy to */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result_length</span><span class="p">;</span> <span class="cm">/* Length of resulting string */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">zend_parse_parameters</span><span class="p">(</span><span class="n">argc</span> <span class="n">TSRMLS_CC</span><span class="p">,</span> <span class="s">&quot;sl&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">str_len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="n">FAILURE</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Calculate length of result */</span>
</span><span class='line'>    <span class="n">result_length</span> <span class="o">=</span> <span class="p">(</span><span class="n">str_len</span> <span class="o">*</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* Allocate memory for result */</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">emalloc</span><span class="p">(</span><span class="n">result_length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* Point at the beginning of the result */</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Copy str to the result */</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">str_len</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* Increment ptr to point at the next position we want to write to */</span>
</span><span class='line'>        <span class="n">ptr</span> <span class="o">+=</span> <span class="n">str_len</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* Null terminate the result. Always null-terminate your strings</span>
</span><span class='line'><span class="cm">    even if they are binary strings */</span>
</span><span class='line'>    <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Return result to the scripting engine without duplicating it*/</span>
</span><span class='line'>    <span class="n">RETURN_STRINGL</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">result_length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，修改<code>config.m4</code>文件,去掉如下两行前的dnl</p>

<pre><code>PHP_ARG_ENABLE(myfunctions, whether to enable myfunctions support,
[  --enable-myfunctions           Enable myfunctions support])
</code></pre>

<p>之后去php源码跟目录，执行</p>

<pre><code>./buildconf --force
</code></pre>

<p>如果提示autoconf版本不对的话，我原来的版本是2.69&#8230; 很郁闷，版本高了居然还不行。执行</p>

<pre><code>apt-get install autoconf2.59
export PHP_AUTOCONF=autoconf2.59
./buildconf --force
</code></pre>

<p>切换到<code>ext/myfunctions</code>目录，执行：</p>

<pre><code>/usr/local/php/bin/phpize 
./configure --with-php-config=/usr/local/php/bin/php-config 
make
make install
</code></pre>

<p>再就是修改<code>php.ini</code>文件，在[extension]部分加入</p>

<pre><code>extension = "myfunctions.so"
</code></pre>

<p>之后重启php</p>

<pre><code>/etc/init.d/php-fpm restart
</code></pre>

<p>如果修改了函数，或者新增加函数，需要重新编译php</p>

<pre><code>make
make install
/etc/init.d/php-fpm restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yaf框架在nginx虚拟主机中的配置]]></title>
    <link href="http://seagg.github.com/blog/2013/01/14/yaf-nginx/"/>
    <updated>2013-01-14T20:19:00+08:00</updated>
    <id>http://seagg.github.com/blog/2013/01/14/yaf-nginx</id>
    <content type="html"><![CDATA[<p>主要是配置一下rewrite规则，重写URL。另外，<code>fastcgi_param PATH_INFO</code>这个不能有，要不然rewrite不能生效&#8230;</p>

<figure class='code'><figcaption><span>Yaf框架在nginx虚拟主机中的配置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">server_name</span> <span class="s">demo.yafphp.com</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.php</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">root</span>  <span class="s">/home/wwwroot/demo.yafphp.com/public</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">error_log</span> <span class="s">/data/order8.log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>              <span class="kn">fastcgi_pass</span>  <span class="s">unix:/tmp/php-cgi.sock</span><span class="p">;</span>
</span><span class='line'>              <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
</span><span class='line'>              <span class="kn">include</span> <span class="s">fcgi.conf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span><span class='line'>              <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span><span class='line'>            <span class="c1"># fastcgi_param PATH_INFO $fastcgi_script_name; # Don&#39;t include this line. </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kn">if</span> <span class="s">(!-e</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="kn">rewrite</span> <span class="s">^/(.*\.(js|ico|gif|jpg|png|css|bmp|html|xls)</span>$<span class="s">)</span> <span class="s">/public/</span><span class="nv">$1</span> <span class="s">last</span><span class="p">;</span>
</span><span class='line'>             <span class="kn">rewrite</span> <span class="s">^/(.*)</span> <span class="s">/index.php?</span><span class="nv">$1</span> <span class="s">last</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="kn">location</span> <span class="s">/status</span> <span class="p">{</span>
</span><span class='line'>              <span class="kn">stub_status</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>              <span class="kn">access_log</span>   <span class="no">off</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kn">location</span> <span class="p">~</span> <span class="sr">.*\.(gif|jpg|jpeg|png|bmp|swf)$</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                      <span class="kn">expires</span>      <span class="s">30d</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kn">location</span> <span class="p">~</span> <span class="sr">.*\.(js|css)?$</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                      <span class="kn">expires</span>      <span class="s">12h</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua中通过ffi调用c的结构体变量]]></title>
    <link href="http://seagg.github.com/blog/2012/12/24/lua-struct/"/>
    <updated>2012-12-24T18:08:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/12/24/lua-struct</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">ffi</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">ffi&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">ffi</span><span class="p">.</span><span class="n">cdef</span><span class="s">[[</span>
</span><span class='line'><span class="s">   typedef struct { </span>
</span><span class='line'><span class="s">     uint8_t id;</span>
</span><span class='line'><span class="s">     char * name; </span>
</span><span class='line'><span class="s">   } stuInfo;</span>
</span><span class='line'><span class="s">]]</span><span class="c1">--新建一个结构体</span>
</span><span class='line'><span class="kd">local</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="kd">local</span> <span class="n">stu</span> <span class="o">=</span> <span class="n">ffi</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">stuInfo[?]&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="c1">--新建变长的结构体变量</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kd">local</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">zhao&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="kd">local</span> <span class="n">ptr</span><span class="o">=</span><span class="n">ffi</span><span class="p">.</span><span class="n">cast</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">char *&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span><span class="c1">--将lua中字符串转换为c的`char *`</span>
</span><span class='line'>   <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="kd">local</span> <span class="n">myname</span> <span class="o">=</span> <span class="n">ffi</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">);</span><span class="c1">--将c中`char *`类型转换为lua的字符串</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">myname</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua中实现php序列化及反序列化函数]]></title>
    <link href="http://seagg.github.com/blog/2012/12/22/lua-php-serialize/"/>
    <updated>2012-12-22T15:07:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/12/22/lua-php-serialize</id>
    <content type="html"><![CDATA[<p>好高兴啊，昨天翻遍了lua自带的库，又在网上找了一天如何在lua中序列化以及反序列化，但结果都不是我要的，因为我要在lua中反序列化由php序列化函数序列化的一个字符串，比如这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a:9:{s:10:"comment_id";s:1:"1";s:7:"user_id";s:7:"7082457";s:9:"user_name";s:9:"putulbaby";    
</span><span class='line'>s:11:"user_avatar";s:68:"http://avatar.bbs.miui.com/data/avatar/001/05/37/38_avatar_small.jpg";       
</span><span class='line'>s:15:"comment_content";s:63:"喜欢蓝色，就这么定了～～～～～～～～～～～";s:13:"comment_grade";s:1:"1";    
</span><span class='line'>s:13:"average_grade";s:3:"5.0";s:6:"up_num";s:1:"0";s:13:"reply_content";s:0:"";}</span></code></pre></td></tr></table></div></figure>


<p> <br/>
但网上一些函数都只是把lua中table类型的数据转换成字符串，如此而已，而且转换成的字符串样式各异，都没办法解析如上的字符串成数组。。。  <br/>
本来想今天写一个的，无意之间发现昨天临走的时候打开的一个页面中有这样的一个函数，仔细看了看，似乎很满足我的需求，运行了一次之后，果然把上面的字符串解析了出来！！但好像有一个问题，就是如果传进去的数组中含有值为数字的字符串，序列化之后就识别成数字而不是字符串。。。 代码如下：</p>

<figure class='code'><figcaption><span>Lua port of PHP serialization functions </span><a href='http://gitorious.org/nutria/seawolf/blobs/ae2d5e6919cff5754f9ed5f04c50f70070300f9e/variable/serialize/serialize.lua'>source code</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">  @file</span>
</span><span class='line'><span class="cm">  Lua port of PHP serialization functions.</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">  Port based on PHPSerialize and PHPUnserialize by Scott Hurring</span>
</span><span class='line'><span class="cm">  http://hurring.com/scott/code/python/serialize/v0.4</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">  @version v0.1 BETA</span>
</span><span class='line'><span class="cm">  @author Fernando P. García; fernando at develcuy dot com</span>
</span><span class='line'><span class="cm">  @copyright Copyright (c) 2009 Fernando P. García</span>
</span><span class='line'><span class="cm">  @license http://opensource.org/licenses/gpl-license.php GNU Public License</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">  $Id$</span>
</span><span class='line'><span class="cm">]]</span>
</span><span class='line'><span class="kd">local</span> <span class="n">_serialize_key</span><span class="p">,</span> <span class="n">_read_chars</span><span class="p">,</span> <span class="n">_read_until</span><span class="p">,</span> <span class="n">_unknown_type</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">_serialize_key</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">--[[</span>
</span><span class='line'><span class="cm">  Serialize a key, which follows different rules than when </span>
</span><span class='line'><span class="cm">  serializing values.  Many thanks to Todd DeLuca for pointing </span>
</span><span class='line'><span class="cm">  out that keys are serialized differently than values!</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">  From http://us2.php.net/manual/en/language.types.array.php</span>
</span><span class='line'><span class="cm">  A key may be either an integer or a string. </span>
</span><span class='line'><span class="cm">  If a key is the standard representation of an integer, it will be</span>
</span><span class='line'><span class="cm">  interpreted as such (i.e. &quot;8&quot; will be interpreted as int 8,</span>
</span><span class='line'><span class="cm">  while &quot;08&quot; will be interpreted as &quot;08&quot;). </span>
</span><span class='line'><span class="cm">  Floats in key are truncated to integer. </span>
</span><span class='line'><span class="cm">  ]]</span>
</span><span class='line'>  <span class="c1">-- Integer, Long, Float</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">number&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:&#39;</span> <span class="o">..</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">;&#39;</span>
</span><span class='line'>  <span class="c1">-- Boolean =&gt; integer</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">boolean&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">data</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:1;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:0;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- String =&gt; string or String =&gt; int (if string looks like int)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">string&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">s:&#39;</span> <span class="o">..</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">:&quot;&#39;</span> <span class="o">..</span> <span class="n">data</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">&quot;;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:&#39;</span> <span class="o">..</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- None / NULL =&gt; empty string</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">nil&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;</span><span class="s">s:0:&quot;&quot;;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- I dont know how to serialize this</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">error</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Unknown / Unhandled key  type (&#39;</span> <span class="o">..</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">)!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">--[[</span>
</span><span class='line'><span class="cm">  Serialize a value.</span>
</span><span class='line'><span class="cm">  ]]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">i</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'>  <span class="c1">-- Numbers</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">number&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c1">-- Integer =&gt; integer</span>
</span><span class='line'>    <span class="k">if</span>  <span class="nb">math.floor</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="n">data</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:&#39;</span> <span class="o">..</span> <span class="n">data</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">;&#39;</span>
</span><span class='line'>    <span class="c1">-- Float, Long =&gt; double</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">d:&#39;</span> <span class="o">..</span> <span class="n">data</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- String =&gt; string or String =&gt; int (if string looks like int)</span>
</span><span class='line'>  <span class="c1">-- Thanks to Todd DeLuca for noticing that PHP strings that</span>
</span><span class='line'>  <span class="c1">-- look like integers are serialized as ints by PHP </span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">string&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">s:&#39;</span> <span class="o">..</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">:&quot;&#39;</span> <span class="o">..</span> <span class="n">data</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">&quot;;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">i:&#39;</span> <span class="o">..</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- Nil / NULL</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">nil&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;</span><span class="s">N;&#39;</span>
</span><span class='line'>  <span class="c1">-- Tuple and List =&gt; array</span>
</span><span class='line'>  <span class="c1">-- The &#39;a&#39; array type is the only kind of list supported by PHP.</span>
</span><span class='line'>  <span class="c1">-- array keys are automagically numbered up from 0</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">table&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="c1">-- All arrays must have keys</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">table.insert</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">_serialize_key</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">table.insert</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">serialize</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;</span><span class="s">a:&#39;</span> <span class="o">..</span> <span class="n">i</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">:{&#39;</span> <span class="o">..</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">out</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">}&#39;</span>
</span><span class='line'>  <span class="c1">-- Boolean =&gt; bool</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">boolean&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">data</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">b:1;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;</span><span class="s">b:0;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">--~ TODO:</span>
</span><span class='line'>  <span class="c1">--~ -- Table + Functions =&gt; stdClass</span>
</span><span class='line'>  <span class="c1">--~ elseif type(data) == &#39;function&#39; then</span>
</span><span class='line'>  <span class="c1">--~ # I dont know how to serialize this</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>   <span class="nb">error</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Unknown / Unhandled data type (&#39;</span> <span class="o">..</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">)!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">stopchar</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">--[[</span>
</span><span class='line'><span class="cm">  Read from data[offset] until you encounter some char &#39;stopchar&#39;.</span>
</span><span class='line'><span class="cm">  ]]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">char</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="p">(</span><span class="n">char</span> <span class="o">==</span> <span class="n">stopchar</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">-- Consumed all the characters and havent found &#39;;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">offset</span> <span class="o">&gt;</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">error</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Invalid&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">char</span><span class="p">)</span>
</span><span class='line'>    <span class="n">char</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- (chars_read, data)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">_read_chars</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">--[[</span>
</span><span class='line'><span class="cm">  Read &#39;length&#39; number of chars from data[offset].</span>
</span><span class='line'><span class="cm">  ]]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">char</span>
</span><span class='line'>  <span class="c1">-- Account for the starting quote char</span>
</span><span class='line'>  <span class="c1">-- offset += 1</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span> <span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">char</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">char</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- (chars_read, data)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">length</span><span class="p">,</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">unserialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="n">offset</span> <span class="ow">or</span> <span class="mi">0</span>
</span><span class='line'>  <span class="cm">--[[</span>
</span><span class='line'><span class="cm">  Find the next token and unserialize it.</span>
</span><span class='line'><span class="cm">  Recurse on array.</span>
</span><span class='line'><span class="cm">  offset = raw offset from start of data</span>
</span><span class='line'><span class="cm">  --]]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">buf</span><span class="p">,</span> <span class="n">dtype</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="n">typeconvert</span><span class="p">,</span> <span class="n">datalength</span><span class="p">,</span> <span class="n">chars</span><span class="p">,</span> <span class="n">readdata</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span>
</span><span class='line'>         <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">keys</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">otchars</span><span class="p">,</span> <span class="n">otype</span><span class="p">,</span> <span class="n">property</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">dtype</span> <span class="o">=</span> <span class="nb">string.lower</span><span class="p">(</span><span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">-- &#39;t:&#39; = 2 chars</span>
</span><span class='line'>  <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">typeconvert</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">datalength</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">=</span> <span class="n">datalength</span>
</span><span class='line'>  <span class="c1">-- int or double =&gt; Number</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">i&#39;</span> <span class="ow">or</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">d&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">typeconvert</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">readdata</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">-- +1 for end semicolon</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="c1">-- bool =&gt; Boolean</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">b&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">typeconvert</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">end</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">readdata</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">-- +1 for end semicolon</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="c1">-- n =&gt; None</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">n&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">readdata</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="c1">-- s =&gt; String</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">s&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">stringlength</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">-- +2 for colons around length field</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>    <span class="c1">-- +1 for start quote</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">readdata</span> <span class="o">=</span> <span class="n">_read_chars</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">stringlength</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">-- +2 for endquote semicolon</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>    <span class="cm">--[[</span>
</span><span class='line'><span class="cm">    TODO</span>
</span><span class='line'><span class="cm">    review original: if chars != int(stringlength) != int(readdata):</span>
</span><span class='line'><span class="cm">    ]]</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">chars</span> <span class="o">==</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">stringlength</span><span class="p">))</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">error</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">String length mismatch&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- array =&gt; Table</span>
</span><span class='line'>  <span class="c1">-- If you originally serialized a Tuple or List, it will</span>
</span><span class='line'>  <span class="c1">-- be unserialized as a Dict.  PHP doesn&#39;t have tuples or lists,</span>
</span><span class='line'>  <span class="c1">-- only arrays - so everything has to get converted into an array</span>
</span><span class='line'>  <span class="c1">-- when serializing and the original type of the array is lost</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">a&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">readdata</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="c1">-- How many keys does this list have?</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">-- +2 for colons around length field</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>    <span class="c1">-- Loop through and fetch this number of key/value pairs</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">-- Read the key</span>
</span><span class='line'>      <span class="n">key</span><span class="p">,</span> <span class="n">ktype</span><span class="p">,</span> <span class="n">kchars</span> <span class="o">=</span> <span class="n">unserialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">kchars</span>
</span><span class='line'>      <span class="c1">-- Read value of the key</span>
</span><span class='line'>      <span class="n">value</span><span class="p">,</span> <span class="n">vtype</span><span class="p">,</span> <span class="n">vchars</span> <span class="o">=</span> <span class="n">unserialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">-- Cound ending bracket of nested array</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">vtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">a&#39;</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">vchars</span> <span class="o">=</span> <span class="n">vchars</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">vchars</span>
</span><span class='line'>      <span class="c1">-- Set the list element</span>
</span><span class='line'>      <span class="n">readdata</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1">-- object =&gt; Table</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="n">dtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">o&#39;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">readdata</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="c1">-- How log is the type of this object?</span>
</span><span class='line'>    <span class="n">chars</span><span class="p">,</span> <span class="n">otchars</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>    <span class="c1">-- Which type is this object?</span>
</span><span class='line'>    <span class="n">otype</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">otchars</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">otchars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">otype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">stdClass&#39;</span> <span class="k">then</span>
</span><span class='line'>      <span class="c1">-- How many properties does this list have?</span>
</span><span class='line'>      <span class="n">chars</span><span class="p">,</span> <span class="n">properties</span> <span class="o">=</span> <span class="n">_read_until</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">:&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">-- +2 for colons around length field</span>
</span><span class='line'>      <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">chars</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>      <span class="c1">-- Loop through and fetch this number of key/value pairs</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">properties</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>        <span class="c1">-- Read the key</span>
</span><span class='line'>        <span class="n">property</span><span class="p">,</span> <span class="n">ktype</span><span class="p">,</span> <span class="n">kchars</span> <span class="o">=</span> <span class="n">unserialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">)</span>
</span><span class='line'>        <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">kchars</span>
</span><span class='line'>        <span class="c1">-- Read value of the key</span>
</span><span class='line'>        <span class="n">value</span><span class="p">,</span> <span class="n">vtype</span><span class="p">,</span> <span class="n">vchars</span> <span class="o">=</span> <span class="n">unserialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dataoffset</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">-- Cound ending bracket of nested array</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">vtype</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s">a&#39;</span> <span class="k">then</span>
</span><span class='line'>          <span class="n">vchars</span> <span class="o">=</span> <span class="n">vchars</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">dataoffset</span> <span class="o">=</span> <span class="n">dataoffset</span> <span class="o">+</span> <span class="n">vchars</span>
</span><span class='line'>        <span class="c1">-- Set the list element</span>
</span><span class='line'>        <span class="n">readdata</span><span class="p">[</span><span class="n">property</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">_unknown_type</span><span class="p">(</span><span class="n">dtype</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">_unknown_type</span><span class="p">(</span><span class="n">dtype</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">--~ return (dtype, dataoffset-offset, typeconvert(readdata))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">typeconvert</span><span class="p">(</span><span class="n">readdata</span><span class="p">),</span> <span class="n">dtype</span><span class="p">,</span> <span class="n">dataoffset</span> <span class="o">-</span> <span class="n">offset</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">-- I don&#39;t know how to unserialize this</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">_unknown_type</span><span class="p">(</span><span class="n">type_</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">error</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Unknown / Unhandled data type (&#39;</span> <span class="o">..</span> <span class="n">type_</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s">)!&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后还遇到一个问题，我的序列化的数据是从redis中通过lrange方法读出来的，我问了老板，读进去的时候已经被php序列化了，但读出来的我认为是序列化的数据用lua中的type函数检测后发现是table类型的。。。这样就不能直接套用unserialize方法进行反序列化了。之后我用lua中便利数组的方法 for key, value in pairs(lists) do print(key .. value) end ,发现序列化的值在value当中，这样就好办了，直接把value反序列化就可以了。好辛苦。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树排序]]></title>
    <link href="http://seagg.github.com/blog/2012/09/11/binary-tree-sort/"/>
    <updated>2012-09-11T09:02:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/11/binary-tree-sort</id>
    <content type="html"><![CDATA[<p>唉，在公司实习都呆傻了，现在写起C++的程序都这么费劲。早上试着写了个二叉树排序都花了半个多小时，这要是半年前的我。。。</p>

<figure class='code'><figcaption><span>二叉树排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="n">node</span> <span class="o">*</span> <span class="n">root</span><span class="o">=</span><span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">addToTree</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">current</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">*</span> <span class="n">r</span><span class="o">=</span><span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>            <span class="n">current</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">=</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">addToTree</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">*</span> <span class="n">l</span><span class="o">=</span><span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>            <span class="n">current</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">=</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">addToTree</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">printTree</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span> <span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">current</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printTree</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printTree</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">=</span><span class="mi">13</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">31</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">61</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">18</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addToTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printTree</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[textarea的内容中含有html的情况]]></title>
    <link href="http://seagg.github.com/blog/2012/09/10/string-html/"/>
    <updated>2012-09-10T11:22:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/10/string-html</id>
    <content type="html"><![CDATA[<p>还有一周就可以回学校然后回家了，上周五很顺利的跟老板和经理请了两周假，所以这周得认真工作了。 <br/>
接着测试我写的插件，果然发现了问题。。。  <br/>
大概是这样的，这个插件是JIRA系统间传递issues，每个issue有很多的field，老板为了保证安全，要求在传输的时候检测每个域，看有没有指定的敏感关键字，如果有要求用户传输issue中进行修改，今天测试的时候，发现有个description域传输有问题，即如果description中含有关键字，要求用户在textarea中修改，程序再读取textarea中的内容重新存入issue中供传输。  <br/>
可是今天传输过程中，发现有个issue的description居然有很多html标签，显示到textarea中倒是没问题，可是读取的时候就郁闷了：</p>

<pre><code>本来应该是这样：    
<textarea ...>string</textarea>
可是这个issue的description是这样的。。。
<textarea cols="60" rows=“2”> &lt;feature name= &quot;http://... required= true &quot; /&gt;... </textarea>
</code></pre>


<p>这样的话用textarea的value属性读取的时候就会遇到问题，双引号，大于小于号都会对value产生影响，导致传过去的有错误。  <br/>
我记得好像有个类似的函数来用字符串传输html的，但函数名称想不起来了，只能用java的字符串替换函数将&#8221;替换为<code>&amp;quot;</code>，将&lt;>分别替换为<code>&amp;lt;</code>，<code>&amp;gt;</code>  <br/>
然后就传输正确了。好惊险啊，这要是突然出了什么大bug，我就走不了了。。。  <br/>
附上<a href="http://114.xixik.com/character/">转义字符表</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Hack: 浏览器兼容性问题]]></title>
    <link href="http://seagg.github.com/blog/2012/09/08/css-hack/"/>
    <updated>2012-09-08T11:14:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/08/css-hack</id>
    <content type="html"><![CDATA[<p>直接看实例吧，下面的程序转载自: <a href="http://www.cnblogs.com/superc/archive/2012/03/11/2390652.html">Superc</a>和<a href="http://www.cnblogs.com/WuQiang/archive/2011/08/23/2150240.html">飘</a></p>

<pre><code>"\9"　例:"margin:0px auto\9;".这里的"\9"可以区别所有IE和FireFox.
"*"　IE6、IE7可以识别.IE8、FireFox不能.
"_"　IE6可以识别"_",IE7、IE8、FireFox不能.
如此,就可以完全区分开IE6、IE7、IE8、FireFox了.</code></pre>


<p></p>

<p>还是不知道怎么区分.好吧,来看个例子:</p>

<figure class='code'><figcaption><span>Example 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>区别IE6、IE7、IE8、FireFox的CSS hack - http://www.52css.com%3c/title&gt;
</span><span class='line'>    <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;!</span><span class="nt">--</span>
</span><span class='line'>    <span class="nf">#test</span><span class="o">,</span><span class="nf">#note</span><span class="p">{</span>
</span><span class='line'>        <span class="k">margin</span><span class="o">:</span><span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>        <span class="k">text-align</span><span class="o">:</span><span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nf">#test</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span><span class="m">30px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'>        <span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>      <span class="k">line-height</span><span class="o">:</span><span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.color</span><span class="p">{</span>
</span><span class='line'>      <span class="k">background-color</span><span class="o">:</span> <span class="m">#CC00FF</span><span class="p">;</span>        <span class="c">/*所有浏览器都会显示为紫色*/</span>
</span><span class='line'>      <span class="k">background-color</span><span class="o">:</span> <span class="m">#FF0000</span><span class="err">\</span><span class="m">9</span><span class="p">;</span>    <span class="c">/*IE6、IE7、IE8会显示红色*/</span>
</span><span class='line'>      <span class="o">*</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#0066FF</span><span class="p">;</span>        <span class="c">/*IE6、IE7会变为蓝色*/</span>
</span><span class='line'>      <span class="n">_background</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="m">#009933</span><span class="p">;</span>        <span class="c">/*IE6会变为绿色*/</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">--</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">class=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;</span>测试方块 www.mycsu.net <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;note&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;strong</span> <span class="na">style=</span><span class="s">&quot;color:#009933&quot;</span><span class="nt">&gt;</span>IE6<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>      <span class="nt">&lt;strong</span> <span class="na">style=</span><span class="s">&quot;color:#0066FF&quot;</span><span class="nt">&gt;</span>IE7<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>      <span class="nt">&lt;strong</span> <span class="na">style=</span><span class="s">&quot;color:#FF0000&quot;</span><span class="nt">&gt;</span>IE8<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>      <span class="nt">&lt;strong</span> <span class="na">style=</span><span class="s">&quot;color:#CC00FF&quot;</span><span class="nt">&gt;</span>FireFox<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>还有这个例子也不错：</p>

<figure class='code'><figcaption><span>Example 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Css Hack<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>    <span class="nf">#test</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span><span class="m">300px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span><span class="m">300px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span><span class="nb">blue</span><span class="p">;</span>      <span class="c">/*firefox*/</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span><span class="nb">red</span><span class="err">\</span><span class="m">9</span><span class="p">;</span>      <span class="c">/*all ie*/</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span><span class="nb">yellow</span><span class="err">\</span><span class="m">0</span><span class="p">;</span>    <span class="c">/*ie8*/</span>
</span><span class='line'>        <span class="o">+</span><span class="k">background-color</span><span class="o">:</span><span class="nb">pink</span><span class="p">;</span>        <span class="c">/*ie7*/</span>
</span><span class='line'>        <span class="n">_background</span><span class="o">-</span><span class="k">color</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span>       <span class="c">/*ie6*/</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nd">:root</span> <span class="nf">#test</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span><span class="nb">purple</span><span class="err">\</span><span class="m">9</span><span class="p">;</span> <span class="p">}</span>  <span class="c">/*ie9*/</span>
</span><span class='line'>    <span class="k">@media</span> <span class="nt">all</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="nd">:0px</span><span class="o">)</span><span class="p">{</span> <span class="nf">#test</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span><span class="nb">black</span><span class="err">\</span><span class="m">0</span><span class="p">;}</span> <span class="p">}</span>  <span class="c">/*opera*/</span>
</span><span class='line'>    <span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:0</span><span class="o">)</span><span class="p">{</span> <span class="nf">#test</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span><span class="nb">gray</span><span class="p">;}</span> <span class="p">}</span>  <span class="c">/*chrome and safari*/</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>test<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>附上一张CSS Hack样式属性前缀表</p>

<center>
<img src="http://seagg.github.com/images/css_hack.jpg">
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向Octopress博客添加相册功能]]></title>
    <link href="http://seagg.github.com/blog/2012/09/06/support-gallery/"/>
    <updated>2012-09-06T17:27:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/06/support-gallery</id>
    <content type="html"><![CDATA[<p>唉，今天又没干别的，调试了一整天的Octopress，老板我对不起你。。。 <br/>
今天向我的博客添加了About Me页面和相册页面，这里主要说说相册功能是如何添加的。  <br/>
对于Octopress这种轻量级的静态博客，没有必要将相册功能做的很完善，神马添加相册，上传照片功能啥的都本地手动添加就行了，这里的相册主要就是展示一下照片，而且在简洁素雅的前提下最好有一些酷酷的效果，这就是我的追求。  <br/>
下午一直在找JS和Jquery的相册，试验了几个效果比较炫的，相册自带的css总是会和Octopress的css相冲突，导致切换到相册页面的时候整体排版就相当凌乱，在我很无助的时候，找到了这里：<a href="http://www.forceappx.com/blog/2011/12/28/getting-fancybox-to-play-nice-with-octopress/">appX</a>，这个文章主要讲的是如何将<a href="http://fancyapps.com/fancybox/#license">fancyBox</a>这个JQuery相册嵌入到Octopress日志中，给日志中的图片添加动态效果。在我试验他的方法之前，先试验了下fancyBox，效果出奇的让我满意，就是我要找的那种功能。  <br/>
fancyBox主要用于在网页中展示相册，单击相片墙中的一个相片的时候，能够有淡入淡出的效果，且能自如的通过鼠标滚轮或者相片两侧的向上向下按钮浏览整个相册的内容。从<a href="http://fancyapps.com/fancybox/#license">fancyBox</a>下载之后运行一下Demo会有更好的理解。</p>

<center>
<img src="http://seagg.github.com/images/support_gallery.JPG">
</center>


<p>“安装过程”大概是这样的，首先得在博客中添加一个相册的导航按钮，方法是修改</p>

<pre><code>\source\_includes\custom\navigation.html    
</code></pre>

<p>仿造上面的添加一个相册页面的链接，比如这样：</p>

<pre><code>&lt;li&gt;&lt;a href="http://seagg.github.com/blog/gallery/demo"&gt;Gallery&lt;/a&gt;&lt;/li&gt;    
</code></pre>

<p>我这里偷懒了，直接在他的demo上建立的我的相册功能，这样很方便，而且完全能满足我要的功能。  <br/>
添加了链接之后，将demo目录复制到<code>/source/blog/gallery/</code>目录下，当然，其他的目录比如<code>lib</code>、<code>source</code>目录也是必不可少的，这些里面包含了jquery和css等。别急，还得对<code>index.html</code>页面进行一下修改。如果不修改的话，这个相册就不能嵌入到网页当中，也就是说，单击相册链接之后，导航，边栏神马的就都不见了，所以得让Octopress将这个相册网页当成子页面，如下修改：将<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;head&gt;</code>等等独立页面拥有的元素统统去掉，然后在页面最开始部位添加</p>

<pre><code>---
layout: page
title: Gallery
footer: false
---</code></pre>


<p>  <br/>
这样Octopress就会认为这个页面是子网页。然后选择demo中自己喜欢的样式，剩余的该删就删吧，不要舍不得。。。  <br/>
添加相片呢，就按照他的格式添加就好了，对了，每个相片还需一个缩略图。  <br/>
嗯，大致就是这样吧，然后生成博客，就能看到相册功能了。  <br/>
如果还有什么不明白的，可以在下面给我留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指针数组与数组指针]]></title>
    <link href="http://seagg.github.com/blog/2012/09/06/array-and-pointer/"/>
    <updated>2012-09-06T08:59:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/06/array-and-pointer</id>
    <content type="html"><![CDATA[<p>昨天从面试宝典上看了道关于指针的面试题，发现这个上次绿盟科技笔试的时候考过，当时很凌乱，有几个记混了。</p>

<p>题目是这样的：</p>

<ul>
<li>定义一个整形数</li>
<li>定义一个指向整形数的指针</li>
<li>定义一个指向指针的指针，它指向的指针，是一个指向整形数的指针</li>
<li>定义一个具有10个整形数的数组</li>
<li>定义一个具有10个指针的数组，这些指针都是指向整形数的</li>
<li>定义一个指向有10个整形数 数组的指针</li>
<li>定义一个指向函数的指针，该函数有一个整形参数 并返回一个整形数据</li>
<li>定义一个有10个指针的数组，每个指针指向一个函数，该函数有一个整形参数，返回一个整形数</li>
</ul>


<pre><code>a) int a; // An integer 
b) int *a; // A pointer to an integer 
c) int **a; // A pointer to a pointer to an integer 
d) int a[10]; // An array of 10 integers 
e) int *a[10]; // An array of 10 pointers to integers 
f) int (*a)[10]; // A pointer to an array of 10 integers 
g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer 
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer </code></pre>


<p><span style="color:red; font-weight:bold">诀窍：弄清楚* [] ()的优先级</span>   <br/>
详细解答参考这里：<a href="http://blog.csdn.net/lyl494223339/article/details/7854396">解答</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加tag cloud且支持中文]]></title>
    <link href="http://seagg.github.com/blog/2012/09/05/add-tag-cloud-and-support-chinese/"/>
    <updated>2012-09-05T19:06:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/05/add-tag-cloud-and-support-chinese</id>
    <content type="html"><![CDATA[<p>今天上班又不务正业了，主要是昨天晚上就完成了老板最近布置的修改JIRA插件，添加敏感关键字检测及提供修改功能的任务，上午给老板演示了一下，在他提出的各种极端情况下插件都能很好的工作，老板让我今天在界面上加些交互信息，使交互更加友好。 <br/>
整个白天都在折腾我的Octopress博客，这个果然很需要耐心，还好我最近已经被java的各种bug折磨的宠辱不惊了。今天主要添加了tag功能。正如<a href="http://log4d.com/2012/05/tag-cloud/">Log4D</a>所说的那样，一篇文章只能输入一个category，但可以有多个tag，我很同意这个观点。我这里也是用了他所用的两个插件<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards/octopress-tag-cloud</a>,不过跟他不同的是，我只用了官方网站上提供的两个插件，因为我觉得category还是排列整齐点的好，毕竟一个博客的category不会很多，没有必要弄成tag那种有大有小的样式，所以category我还沿用了Octopress官方的样式。这两个插件安装起来不太难，不过有些细节需要注意的。  <br/>
第一个插件的功能是使文章支持<code>tag</code>，第二个是集中显示<code>tag cloud</code>。</p>

<p><strong>关于第一个插件的安装</strong>，我是把官网上提供的文件都复制到了相应的目录，这样在Archives中就能看到tag的信息，<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>中提到的<code>Usage</code>,上面的我没有用到，只是往<code>config.yml</code>中添加了</p>

<pre><code>tag_dir: tags    
</code></pre>

<p>第二个配置信息添加的时候总是出错，不过不添加也没关系。可以在下属文件中进行修改。</p>

<pre><code>\source\includes\post\tags.html    
</code></pre>

<p>只需在<code>span</code>标签中添加Tags:即可。
添加之后就可以使用tag功能了，具体是在新post出的日志中添加,语法是</p>

<pre><code>tags: [tag1, tag2, ...]
</code></pre>

<p>为了使每次新post出的日志都能自动附带tags: 标签，可以修改<code>config.rb</code>文件，在110行左右添加<code>post.puts "tags: "</code>。  <br/>
<strong>第二个插件的安装</strong>，复制相应文件到对应的目录，然后到<code>source\_includes\custom\navigation.html</code>中添加一个tag cloud页面的链接，指向刚刚添加的tags.html文件。对了，还得修改下样式，到<code>sass/custom/_styles.scss</code>中添加如下css样式：</p>

<pre><code>#content article .cloud li{
  display: inline;
  list-style: none outside none;
  padding: 0 4px;
}</code></pre>


<p>  <br/>
之后把tags.html中的样式换成cloud即可。  <br/>
<strong>关于使category，和tag支持中文</strong>，由于我没有用Log4D修改之后的插件，所以出现了category和tag不支持中文的情况，这个的修改参考了<a href="http://pfmiles.github.com/blog/liquid-error-about-regexp-match-when-using-octopress-tagcloud/">pf_miles</a>的日志，说的挺好的，不过对于像我这样两个tag插件都用官方原版的来说，就不能直接复制里面的代码了，否则会出现tag和category相混淆的情况。但他的思想还是可以学的嘛，提炼出来，就是把<code>plugins</code>目录下的<code>tag_cloud.rb</code>、<code>tag_generator.rb</code>、<code>catetory_generator.rb</code>这几个文件的#正则表达式#部分都加上\u，就可以了。  <br/>
思路可能有点乱，这是我凭借记忆写出来的，有可能有些出入，如果有什么不明白的，可以评论，我会及时回复的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给octopress添加Disqus评论功能]]></title>
    <link href="http://seagg.github.com/blog/2012/09/03/config-comment-on-octopress/"/>
    <updated>2012-09-03T19:16:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/03/config-comment-on-octopress</id>
    <content type="html"><![CDATA[<p>经过了几天的折腾，昨天终于把octopress博客建立好了。更新起来很方便，只需要编写类似Latex语言的markdown文件，然后<code>rake generate</code>, <code>rake deploy</code>就可以啦。</p>

<p>今天加入了评论功能，这里主要记录下添加评论的过程。Octopress中其实已经集成了Disqus评论插件，只需要简单设置一下就可以。</p>

<ul>
<li><p><strong>登录<a href="http://disqus.com">Disqus网站</a></strong>, 然后注册用户名密码，邮箱验证。</p></li>
<li><p>单击<em>Get this on your site</em>按钮</p></li>
</ul>


<center>
<img src="http://seagg.github.com/images/add_comment1.PNG" >
</center>


<ul>
<li><strong>填写网站的信息</strong></li>
</ul>


<center>
<img src="http://seagg.github.com/images/add_comment2.PNG">
</center>


<ul>
<li>修改_config.yml文件:</li>
</ul>


<pre><code>#Disqus Comments
disqus_short_name: Site Shortname
disqus_show_comment_count: true</code></pre>


<p>之后就可以通过<code>rake new_post['title']</code>创建日志，日志中设定：</p>

<pre><code>comment: true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging Like a Hacker]]></title>
    <link href="http://seagg.github.com/blog/2012/09/03/blogging-like-a-hacker/"/>
    <updated>2012-09-03T12:42:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/03/blogging-like-a-hacker</id>
    <content type="html"><![CDATA[<p><strong>转载自<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging like a hacker</a></strong></p>

<p>h1. Blogging Like a Hacker</p>

<p>p(meta). 17 Nov 2008 - San Francisco</p>

<p>Back in 2000, when I thought I was going to be a professional writer, I spent hours a day on LiveJournal doing writing practice with other aspiring poets and authors. Since then I&#8217;ve blogged at three different domains about web standards, print design, photography, Flash, illustration, information architecture, ColdFusion, package management, PHP, CSS, advertising, Ruby, Rails, and Erlang.</p>

<p>I love writing. I get a kick out of sharing my thoughts with others. The act of transforming ideas into words is an amazingly efficient way to solidify and refine your thoughts about a given topic. But as much as I enjoy blogging, I seem to be stuck in a cycle of quitting and starting over. Before starting the current iteration, I resolved to do some introspection to determine the factors that were leading to this destructive pattern.</p>

<p>I already knew a lot about what I <em>didn&#8217;t</em> want. I was tired of complicated blogging engines like WordPress and Mephisto. I wanted to write great posts, not style a zillion template pages, moderate comments all day long, and constantly lag behind the latest software release. Something like Posterous looked attractive, but I wanted to style my blog, and it needed to be hosted at the domain of my choosing. For the same reason, other hosted sites (wordpress.com, blogger.com) were disqualified. There are a few people directly using GitHub as a blog (which is very cool), but that&#8217;s a bit too much of an impedance mismatch for my tastes.</p>

<p>On Sunday, October 19th, I sat down in my San Francisco apartment with a glass of apple cider and a clear mind. After a period of reflection, I had an idea. While I&#8217;m not specifically trained as an author of prose, I <em>am</em> trained as an author of code. What would happen if I approached blogging from a software development perspective? What would that look like?</p>

<p>First, all my writing would be stored in a Git repository. This would ensure that I could try out different ideas and explore a variety of posts all from the comfort of my preferred editor and the command line. I&#8217;d be able to publish a post via a simple deploy script or post-commit hook. Complexity would be kept to an absolute minimum, so a static site would be preferable to a dynamic site that required ongoing maintenance. My blog would need to be easily customizable; coming from a graphic design background means I&#8217;ll always be tweaking the site&#8217;s appearance and layout.</p>

<p>Over the last month I&#8217;ve brought these concepts to fruition and I&#8217;m pleased to announce &#8220;Jekyll&#8221;:http://github.com/mojombo/jekyll. Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. If you&#8217;re reading this on the website (http://tom.preston-werner.com), you&#8217;re seeing a Jekyll generated blog!</p>

<p>To understand how this all works, open up my &#8220;TPW&#8221;:http://github.com/mojombo/tpw repo in a new browser window. I&#8217;ll be referencing the code there.</p>

<p>Take a look at &#8220;index.html&#8221;:http://github.com/mojombo/tpw/tree/master/index.html. This file represents the homepage of the site. At the top of the file is a chunk of YAML that contains metadata about the file. This data tells Jekyll what layout to give the file, what the page&#8217;s title should be, etc. In this case, I specify that the &#8220;default&#8221; template should be used. You can find the layout files in the &#8221;<em>layouts&#8221;:http://github.com/mojombo/tpw/tree/master/</em>layouts directory. If you open &#8220;default.html&#8221;:http://github.com/mojombo/tpw/tree/master/_layouts/default.html you can see that the homepage is constructed by wrapping index.html with this layout.</p>

<p>You&#8217;ll also notice Liquid templating code in these files. &#8220;Liquid&#8221;:http://www.liquidmarkup.org/ is a simple, extensible templating language that makes it easy to embed data in your templates. For my homepage I wanted to have a list of all my blog posts. Jekyll hands me a Hash containing various data about my site. A reverse chronological list of all my blog posts can be found in <code>site.posts</code>. Each post, in turn, contains various fields such as <code>title</code> and <code>date</code>.</p>

<p>Jekyll gets the list of blog posts by parsing the files in the &#8221;<em>posts&#8221;:http://github.com/mojombo/tpw/tree/master/</em>posts directory. Each post&#8217;s filename contains the publishing date and slug (what shows up in the URL) that the final HTML file should have. Open up the file corresponding to this blog post: &#8220;2008-11-17-blogging-like-a-hacker.textile&#8221;:http://github.com/mojombo/tpw/tree/master/<em>posts/2008-11-17-blogging-like-a-hacker.textile. GitHub renders textile files by default, so to better understand the file, click on the &#8220;raw&#8221;:http://github.com/mojombo/tpw/tree/master/</em>posts/2008-11-17-blogging-like-a-hacker.textile?raw=true view to see the original file. Here I&#8217;ve specified the <code>post</code> layout. If you look at that file you&#8217;ll see an example of a nested layout. Layouts can contain other layouts allowing you a great deal of flexibility in how pages are assembled. In my case I use a nested layout in order to show related posts for each blog entry. The YAML also specifies the post&#8217;s title which is then embedded in the post&#8217;s body via Liquid.</p>

<p>Posts are handled in a special way by Jekyll. The date you specify in the filename is used to construct the URL in the generated site. This post, for instance, ends up at <code>http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html</code>.</p>

<p>Files that do not reside in directories prefixed with an underscore are mirrored into a corresponding directory structure in the generated site. If a file does not have a YAML preface, it is not run through the Liquid interpreter. Binary files are copied over unmodified.</p>

<p>In order to convert your raw site into the finished version, you simply run:</p>

<pre class="terminal"><code>$ jekyll /path/to/raw/site /path/to/place/generated/site</code></pre>


<p>Jekyll is still a very young project. I&#8217;ve only developed the exact functionality that I&#8217;ve needed. As time goes on I&#8217;d like to see the project mature and support additional features. If you end up using Jekyll for your own blog, drop me a line and let me know what you&#8217;d like to see in future versions. Better yet, fork the project over at GitHub and hack in the features yourself!</p>

<p>I&#8217;ve been living with Jekyll for just over a month now. I love it. Driving the development of Jekyll based on the needs of my blog has been very rewarding. I can edit my posts in TextMate, giving me automatic and competent spell checking. I have immediate and first class access to the CSS and page templates. Everything is backed up on GitHub. I feel a lightness now when I&#8217;m writing a post. The system is simple enough that I can keep the entire conversion process in my head. The distance from my brain to my blog has shrunk, and, in the end, I think that will make me a better author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的Blog]]></title>
    <link href="http://seagg.github.com/blog/2012/09/03/work-in-intel/"/>
    <updated>2012-09-03T09:50:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/03/work-in-intel</id>
    <content type="html"><![CDATA[<p>好费劲啊，octopress博客终于整好了。<br>
我会慢慢的从网易博客<a href="http://blog.163.com/lovejingru@yeah/">永远的海哥</a>迁移到这里。  <br/>
问题总结如下：</p>

<pre><code>ssh的时候提示22 **bad file number**   
主要原因是公司的网络问题，可能因为代理或者设置了防火墙的原因，换成外网就没问题了；   
public key问题： 按照github-&gt;admin-&gt;ssh key中的说明就可以了；   
中文编码问题：将post出的日志编码转换为utf-8 without BOM格式，再保存；   
</code></pre>

<p><strong>下一步研究下代码插入，高亮和comment问题。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[冒泡排序]]></title>
    <link href="http://seagg.github.com/blog/2012/09/02/hello/"/>
    <updated>2012-09-02T23:10:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/02/hello</id>
    <content type="html"><![CDATA[<p>冒泡排序</p>

<figure class='code'><figcaption><span>bubble sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bubblesort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">bubblesort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%-4d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intern in Intel]]></title>
    <link href="http://seagg.github.com/blog/2012/09/02/first-note/"/>
    <updated>2012-09-02T22:08:00+08:00</updated>
    <id>http://seagg.github.com/blog/2012/09/02/first-note</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实习三周了，感觉还不错，从之前的不能想象我居然开始在公司里上班，到现在慢慢接受且熟悉了现在的生活。第一天到公司的时候，感觉什么都这么新鲜，刷卡进楼，再刷卡进办公区，看到很多忙碌的人，说着各种术语，还夹杂着英文单词，烧个image、这个得work on一下、更新下wiki，什么都这么陌生，我的电脑没配下来之前一直用一个台式电脑，装的居然还是OpenSUSE系统，好恨之前没把linux用熟，而且公司的网络还特别奇怪，得设置代理，设置完了吧用Firefox可以上去网，命令行里可以ping到网站，但一用命令下载什么软件包却始终连不上，到现在也没太整明白，只知道用IE可以上去公司的内网，火狐却不行，上公司的邮箱和lync需要一个无线网络连接，下软件包却需要换另一个网络连接，总之很麻烦。  <br/>
公司里到处可以见到讨论技术的人，楼梯口的沙发，电梯里，等待打饭的人，甚至是卫生间里。卫生间里有个大叔专门负责清洁，把那擦的一尘不染，而且总是笑眯眯的，遇到人讨论架构啊系统啊什么的，感觉他跟我一样好奇，听着他们的对话，总有种错觉，那个大叔是intel的专家，掌握着鬼魅般的技术，笑看一切，好吧，我承认是黑客小说看多了。公司的食堂还不错，很便宜，而且第一顿饭的印象很好，记得打了份鸡腿，一份白菜豆腐，一碗米饭，一碗红豆粥，才8块几，据说这个食堂是有intel补贴的，怪不得呢，可惜就是不提供晚饭，谁让这边从不加班呢。每次到中午11：30去吃饭的人都很多，排好几个很长的队伍，然后取盘子，然后去窗口自己选一份份摆好的菜，然后是米饭和粥，再到出口那块刷饭卡，有两个漂亮的工作人员刷卡然后发一张餐巾纸，这两个人特别厉害，我观察过很多回了，那么多种类的菜，不同的价格，而且盘里两到三个菜加上饭和粥或汤，她们却能看一眼就算出来多少钱然后刷卡，不需要停顿，很强的，intel里到处都是神人啊！  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;老板人很好，电话面试我的人就是他，记得当时问了很多c语言的东西，比如指针和数组的区别，复制构造函数怎么写等，到这边之后发现暂时还没用到c和c++，第一天刚来就带我一起去了一个会议室，跟我讲要做JIRA插件开发，同时接手一个要离职的同事的工作，老板讲话很和蔼，也很有条理，会时不时的看着你的眼睛，期待你的反馈，让我感动的是他居然亲自到我电脑这告诉我怎么申请出入办公区的卡，需要什么在线培训等，第一周基本是让我熟悉JIRA使用，每天都会来问问进展，有什么问题，第二周开始让我写daily report，包括昨天干了什么，今天打算干什么，遇到什么问题等，记得第一天写了之后没一会，他就过来给我讲我report里写的遇到的问题，很好的老板，口头语是没错，太对了，而且很喜欢笑，是个快乐的IT男。第二周开始与那个要离职的人交接，把他做过的、维护过的一些程序给我看，有将尽十个plugin和gadget，我差不多每天看一个，先熟悉功能，然后看看代码，不懂的的地方他就给我讲讲，可惜我的JAVA和js不是特别熟悉，而且JIRA有很多自己的API，还有SOAP和REST协议神马的，要一天之内理解他一两个月写出的程序，很有困难，所以也只能了解个大概，知道原理，具体的以后再深入研究吧。这周三开始有任务了，老板第一天就跟我说过，让我修改一个第三方插件，我一看，数了数，有90个类。。。 结构很复杂的样子，让我修改其中的bug，然后扩充一项功能，昨天看了一下午，晚上回来头昏昏沉沉的，但还得继续学java，其实虽说是插件，但每个插件基本都是一个网站，而且还是有前端，有后台action处理的，类似jsp和servlet组成的网站，但还有所不同，要用到jira的api，还有jira奇怪的前后台通信方式和它奇怪的数据库，唉，老板居然给我这个新手这么大的任务，崩溃了，看来明天还得去公司呆着去。  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司的环境挺好的，饼干饮料咖啡奶茶啥的，随便享用，我最喜欢喝那的拿铁咖啡和泡沫奶茶，记得昨天去喝奶茶，按了按钮，居然出来的只是牛奶，看来暂时没有茶的原料了。公司挺人性化的，边上还放了杯子，我原来一直用那的杯子，用完之后冲一下，后来一个屋的同事告诉我那个是供外来人员用的，得自己带杯子过来。。。 我瞬间感觉我又out了，从那之后我就不好意思用那的杯子了，不过我的水杯比较能装，有时候去那就打两份咖啡，哈哈。这有一点特别好，就是从来不加班，大部分人都是5点左右就走了，不走的六点之前基本也都走了，我是在哪都是呆着，况且还有免费空调，就每天多呆会。  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加油，认真实习，好公司好环境只是暂时的，要想变成永恒，还得靠自己的努力。</p>
]]></content>
  </entry>
  
</feed>
